{"version":3,"sources":["components/AdviceGenerator.jsx","App.js","reportWebVitals.js","index.js"],"names":["AdviceGenerator","state","advice","isLoading","count","getAdvice","bind","this","axios","get","then","data","slip","setState","manageCounter","counter","setInterval","clearInterval","className","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAuFeA,G,wDAhFb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,GACRC,WAAW,EACXC,MAAO,GAGT,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBARL,E,gEAYZC,KAAKF,c,kCAGM,IAAD,OASVG,IAAMC,IAAN,qCAA+CC,MAC7C,YAIO,IAFKR,EAEN,EAHJS,KACEC,KAAQV,OAGV,EAAKW,SAAS,CAAEX,OAAQA,EAAQC,WAAW,EAAOC,MAAO,IACzD,EAAKU,qB,sCAKM,IAAD,OACRC,EAAUC,aAAY,WAC1B,EAAKH,SAAS,CACZT,MAAO,EAAKH,MAAMG,OAAS,EAAI,EAAI,EAAKH,MAAMG,MAAQ,IAGpD,EAAKH,MAAMG,OAAS,GACtBa,cAAcF,KAEf,O,+BAGK,IAAD,SAC8BR,KAAKN,MAAlCC,EADD,EACCA,OAAQC,EADT,EACSA,UAAWC,EADpB,EACoBA,MAE3B,OACE,sBAAKc,UAAU,mBAAf,UACE,wBACEA,UAAU,kBACVC,QAAS,WACO,IAAVf,IACF,EAAKS,SAAS,CAAEV,WAAW,IAC3B,EAAKE,cALX,6BAWEF,EAGA,qBAAKe,UAAU,YAFf,mBAAGA,UAAU,SAAb,SAAuBhB,IAKd,IAAVE,EACC,qBAAIc,UAAU,QAAd,0CACgCd,EADhC,eAGE,Y,GA3EkBgB,IAAMC,YCMrBC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCKSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a3de4956.chunk.js","sourcesContent":["import React from \"react\";\n\nimport axios from \"axios\";\n\nimport \"./AdviceGenerator.css\";\n\nclass AdviceGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      advice: \"\",\n      isLoading: true,\n      count: 0,\n    };\n\n    this.getAdvice = this.getAdvice.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAdvice();\n  }\n\n  getAdvice() {\n    // fetch\n    // fetch(\"https://api.adviceslip.com/advice\")\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     this.setState({ advice: res.slip.advice, isLoading: false });\n    //   });\n\n    // axios\n    axios.get(`https://api.adviceslip.com/advice`).then(\n      ({\n        data: {\n          slip: { advice },\n        },\n      }) => {\n        this.setState({ advice: advice, isLoading: false, count: 5 });\n        this.manageCounter();\n      }\n    );\n  }\n\n  manageCounter() {\n    const counter = setInterval(() => {\n      this.setState({\n        count: this.state.count <= 0 ? 5 : this.state.count - 1,\n      });\n\n      if (this.state.count <= 0) {\n        clearInterval(counter);\n      }\n    }, 1000);\n  }\n\n  render() {\n    const { advice, isLoading, count } = this.state;\n\n    return (\n      <div className=\"advice-generator\">\n        <button\n          className=\"generate-advice\"\n          onClick={() => {\n            if (count === 0) {\n              this.setState({ isLoading: true });\n              this.getAdvice();\n            }\n          }}\n        >\n          Generate Advice\n        </button>\n        {!isLoading ? (\n          <p className=\"advice\">{advice}</p>\n        ) : (\n          <div className=\"loading\"></div>\n        )}\n\n        {count !== 0 ? (\n          <h1 className=\"timer\">\n            You can regenerate advice in {count} seconds!\n          </h1>\n        ) : null}\n      </div>\n    );\n  }\n}\n\nexport default AdviceGenerator;\n","import \"./App.css\";\n\nimport AdviceGenerator from \"./components/AdviceGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <AdviceGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
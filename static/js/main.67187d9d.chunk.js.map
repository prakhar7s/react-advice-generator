{"version":3,"sources":["components/AdviceGenerator.jsx","App.js","reportWebVitals.js","index.js"],"names":["AdviceGenerator","state","advice","isLoading","getAdvice","bind","this","axios","get","then","data","slip","setState","className","onClick","React","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTA6DeA,G,wDAtDb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,OAAQ,GACRC,WAAW,GAGb,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBAPL,E,gEAWZC,KAAKF,c,kCAGM,IAAD,OASVG,IACGC,IADH,qCAEGC,MAAK,gBAAmBP,EAAnB,EAAGQ,KAAQC,KAAQT,OAAnB,OACJ,EAAKU,SAAS,CAAEV,OAAQA,EAAQC,WAAW,S,+BAIvC,IAAD,SACuBG,KAAKL,MAA3BC,EADD,EACCA,OAAQC,EADT,EACSA,UAEhB,OACE,sBAAKU,UAAU,mBAAf,UACE,wBACEA,UAAU,kBACVC,QAAS,WACP,EAAKF,SAAS,CAAET,WAAW,IAC3B,EAAKC,aAJT,6BASED,EAGA,qBAAKU,UAAU,UAAf,yBAFA,mBAAGA,UAAU,SAAb,SAAuBX,W,GA9CHa,IAAMC,YCMrBC,MARf,WACE,OACE,qBAAKJ,UAAU,MAAf,SACE,cAAC,EAAD,OCKSK,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.67187d9d.chunk.js","sourcesContent":["import React from \"react\";\n\nimport axios from \"axios\";\n\nimport \"./AdviceGenerator.css\";\n\nclass AdviceGenerator extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      advice: \"\",\n      isLoading: true,\n    };\n\n    this.getAdvice = this.getAdvice.bind(this);\n  }\n\n  componentDidMount() {\n    this.getAdvice();\n  }\n\n  getAdvice() {\n    // fetch\n    // fetch(\"https://api.adviceslip.com/advice\")\n    //   .then((res) => res.json())\n    //   .then((res) => {\n    //     this.setState({ advice: res.slip.advice, isLoading: false });\n    //   });\n\n    // axios\n    axios\n      .get(`https://api.adviceslip.com/advice`)\n      .then(({ data: { slip: { advice } } }) =>\n        this.setState({ advice: advice, isLoading: false })\n      );\n  }\n\n  render() {\n    const { advice, isLoading } = this.state;\n\n    return (\n      <div className=\"advice-generator\">\n        <button\n          className=\"generate-advice\"\n          onClick={() => {\n            this.setState({ isLoading: true });\n            this.getAdvice();\n          }}\n        >\n          Generate Advice\n        </button>\n        {!isLoading ? (\n          <p className=\"advice\">{advice}</p>\n        ) : (\n          <div className=\"loading\">Loading....</div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default AdviceGenerator;\n","import \"./App.css\";\n\nimport AdviceGenerator from \"./components/AdviceGenerator\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <AdviceGenerator />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}